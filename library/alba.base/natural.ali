{: Copyright (C) Helmut Brandl  <helmut dot brandl at gmx dot net>

   This file is distributed under the terms of the GNU General Public License
   version 2 (GPLv2) as published by the Free Software Foundation. :}

use
    predicate
end


case class
    NATURAL
create
    0
    successor (predecessor:NATURAL)
end

1: NATURAL = 0.successor
2: NATURAL = 1.successor
3: NATURAL = 2.successor
4: NATURAL = 3.successor

(+) (a,b: NATURAL):  NATURAL
(*) (a,b: NATURAL):  NATURAL
(^) (a,b: NATURAL):  NATURAL

predecessor (n:NATURAL): NATURAL
    require
        n as _.successor
    ensure
        Result = inspect n
                 case    m.successor then m
                 end
    end


all(a,b,c:NATURAL)
    ensure
        -- addition
        a + 0 = a
        0 + a = a
        a + b.successor = (a + b).successor
        a + 1 = a.successor

        a + b = b + a
        a + b + c = a + (b + c)

        -- multiplication
        a * 0 = 0
        0 * a = 0
        a.successor * b = a*b + b
        1 * a = a

        -- distributive laws
        a * (b + c) = a*b + a*c

        -- exponentiation
        a^0 = 1
        a ^ b.successor = a^b * a
    end
