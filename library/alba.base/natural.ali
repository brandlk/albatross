{: Copyright (C) Helmut Brandl  <helmut dot brandl at gmx dot net>

   This file is distributed under the terms of the GNU General Public License
   version 2 (GPLv2) as published by the Free Software Foundation. :}

use
    predicate
    tuple
end


case class
    NATURAL
create
    0
    successor (predecessor:NATURAL)
end

1: NATURAL = 0.successor
2: NATURAL = 1.successor
3: NATURAL = 2.successor
4: NATURAL = 3.successor

(<=) (a,b:NATURAL): BOOLEAN
(<)  (a,b:NATURAL): BOOLEAN -> a <= b and a /= b

(+) (a,b: NATURAL):  NATURAL
    -> inspect b
       case 0           then a
       case n.successor then (a + n).successor
       end

(*) (a,b: NATURAL):  NATURAL
    -> inspect a
       case 0           then 0
       case n.successor then n*b + b
       end

(^) (a,b: NATURAL):  NATURAL
    -> inspect b
       case 0           then 1
       case n.successor then a^n * a
       end

predecessor (n:NATURAL): NATURAL
    require
        n as _.successor
    ensure
        Result = (inspect n
                 case    m.successor then m
                 end)
    end


all(a,b,c,x:NATURAL)
    ensure
        -- successor
        a /= 0 ==> some(x) a = successor(x)
        (some(x) a = successor(x)) ==> a /= 0

        -- addition
        a.successor + b = a + b.successor
        a + 0 = a
        0 + a = a
        a + b.successor = (a + b).successor
        a + 1 = a.successor

        a + b = b + a
        a + b + c = a + (b + c)
        a + x = b + x  ==>  a = b
        x + a = x + b  ==>  a = b
        a + x = a      ==>  x = 0

        a + b = 0  ==> a = 0
        a + b = 0  ==> b = 0

        -- order
        a <= b     ==>  a < b + 1
        a < b + 1  ==>  a <= b
        a + 1 <= b ==>  a < b
        a < b      ==>  a + 1 <= b
        a <= b  ==> some(x) a + x = b
        (some(x) a + x = b) ==> a <= b
        a < a + 1
        a <= b  ==> a + x <= b + x
        a + x <= b + x ==> a <= b
        a <= b or b <= a
        a <= b or b < a
        a <= a
        a <= b  ==>  b <= a  ==> a = b
        a <= b  ==>  b <= c  ==> a <= c

        -- multiplication
        a * 0 = 0
        0 * a = 0
        a.successor * b = a*b + b
        1 * a = a

        -- distributive laws
        a * (b + c) = a*b + a*c

        -- exponentiation
        a^0 = 1
        a ^ b.successor = a^b * a
    end
