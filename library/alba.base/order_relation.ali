use
    endorelation
    function_logic
end

A: ANY
B: ANY


{:
# Preorder, partial order and linear order
:}

is_preorder(r:{A,A}): ghost BOOLEAN
    -> r.is_reflexive and
       r.is_transitive


is_partial_order(r:{A,A}): ghost BOOLEAN
    -> r.is_reflexive and
       r.is_transitive and
       r.is_antisymmetric


is_linear_order(r:{A,A}): ghost BOOLEAN
    -> r.is_partial_order and
       r.is_dichotomic




{:
# Upper and lower set
:}


upper_set(a:A, r:{A,A}): {A}
        -- The set of all elements above 'a' with respect to the relation 'r'.
    -> {x: r(a,x)}

lower_set(a:A, r:{A,A}): {A}
        -- The set of all elements below 'a' with respect to the relation 'r'.
    -> {x: r(x,a)}





{:
# Upper and lower bounds
:}


is_lower_bound(a:A, p:{A}, r:{A,A}): ghost BOOLEAN
        -- Is 'a' a lower bound for the set 'p' with respect to the relation 'r'?
    -> a in r.carrier and all(x) x in p ==> r(a,x)

is_upper_bound(a:A, p:{A}, r:{A,A}): ghost BOOLEAN
        -- Is 'a' an upper bound for the set 'p' with respect to the relation 'r'?
    -> a in r.carrier and all(x) x in p ==> r(x,a)

lower_bounds(p:{A}, r:{A,A}): ghost {A}
        -- The set of all lower bounds of the set 'p' with respect to the
        -- relation 'r'.
    -> {a: a.is_lower_bound(p,r)}

upper_bounds(p:{A}, r:{A,A}): ghost {A}
        -- The set of all upper bounds of the set 'p' with respect to the
        -- relation 'r'.
    -> {a: a.is_upper_bound(p,r)}


all(a,b:A, p:{A}, r:{A,A})
    ensure
        a.is_lower_bound(p,r.inverse) ==> a.is_upper_bound(p,r)
        a.is_upper_bound(p,r.inverse) ==> a.is_lower_bound(p,r)

        r.is_partial_order ==>
        r(a,b) ==>
        b.is_lower_bound(p,r)
        ==>
        a.is_lower_bound(p,r)

        r.is_partial_order ==>
        r(a,b) ==>
        a.is_upper_bound(p,r)
        ==>
        b.is_upper_bound(p,r)
    end



{:
# Least elements
:}

is_least(a:A, p:{A}, r:{A,A}): ghost BOOLEAN
        -- Is 'a' the least element of set 'p' with respect to the relation 'r'?
    -> a in p and a.is_lower_bound(p,r)

has_least(p:{A}, r:{A,A}): ghost BOOLEAN
        -- Does the set 'p' have a least element?
    -> some(x) x.is_least(p,r)


least(p:{A}, r:{A,A}): ghost A
        -- The least element of the set 'p' in the partial order 'r'.
    require
        r.is_partial_order
        p.has_least(r)
    ensure
        Result.is_least(p,r)
    end


is_least(a:A,r:{A,A}): ghost BOOLEAN
        -- Is 'a' the least element of the carrier of 'r'?
    -> all(x) r(a,x)


has_least(r:{A,A}): ghost BOOLEAN
        -- Does the carrier of 'r' have a least element?
    -> some(a) a.is_least(r)


least(r:{A,A}): ghost A
        -- The least element of the carrier of 'r'.
    require
        r.is_partial_order
        r.has_least
    ensure
        Result.is_least(r)
    end





{:
# Greatest elements
:}

is_greatest(a:A, p:{A}, r:{A,A}): ghost BOOLEAN
        -- Is 'a' the greatest element of set 'p' with respect to the relation 'r'?
    -> a in p and a.is_upper_bound(p,r)

has_greatest(p:{A}, r:{A,A}): ghost BOOLEAN
        -- Does the set 'p' have a greatest element?
    -> some(x) x.is_greatest(p,r)



greatest(p:{A}, r:{A,A}): ghost A
        -- The greatest element of the set 'p' in the partial order 'r'.
    require
        r.is_partial_order
        p.has_greatest(r)
    ensure
        Result.is_greatest(p,r)
    end


all(a:A, p:{A}, r:{A,A})
    ensure
        a.is_greatest(p,r) ==> a.is_least(p,r.inverse)

        a.is_least(p,r)    ==> a.is_greatest(p,r.inverse)
    end


{:
# Infimum and supremum
:}

is_infimum(a:A, p:{A}, r:{A,A}): ghost BOOLEAN
        -- Is 'a' an infimum i.e. a greatest lower bound of the set 'p' with
        -- respect to the relation 'r'
    -> a.is_greatest(p.lower_bounds(r),r)

is_supremum(a:A, p:{A}, r:{A,A}): ghost BOOLEAN
        -- Is 'a' a supremum i.e. a least upper bound of the set 'p' with
        -- respect to the relation 'r'
    -> a.is_least(p.upper_bounds(r),r)

has_infimum(p:{A}, r:{A,A}): ghost BOOLEAN
        -- Does the set 'p' have a greatest lower bound?
    -> some(a) a.is_infimum(p,r)

has_supremum(p:{A}, r:{A,A}): ghost BOOLEAN
        -- Does the set 'p' have a least upper bound?
    -> some(a) a.is_supremum(p,r)

infimum(p:{A}, r:{A,A}): ghost A
        -- The greatest lower bound of the set 'p' in the partial order 'r'.
    require
        r.is_partial_order
        p.has_infimum(r)
    ensure
        Result.is_infimum(p,r)
    end

supremum(p:{A}, r:{A,A}): ghost A
        -- The least upper bound of the set 'p' in the partial order 'r'.
    require
        r.is_partial_order
        p.has_supremum(r)
    ensure
        Result.is_supremum(p,r)
    end



all(a:A, p:{A}, r:{A,A})
    ensure
        a.is_infimum(p,r) ==> a.is_supremum(p,r.inverse)
    end




{:
# Directed sets
:}

is_updirected(d:{A}, r:{A,A}): ghost BOOLEAN
    -> d.has_some
       and
       all(x,y)
           {x,y} <= d ==>
           some(z) z.is_upper_bound({x,y},r)





{:
# Monotonic and continuous functions

A monotonic function is between two order relations is a function which
preserves the order, i,e

    r1(x,y) ==> r2(f(x),f(y))

An upcontinuous function preserves suprema i.e.

    x.is_supremum(p,r1) ==> f(x).is_supremum(f[p],r2)

and a downcontiunous function presevers infima

    x.is_infimum(p,r1) ==> f(x).is_infimum(f[p],r2)

:}


is_monotonic(f:A->B, r1:{A,A}, r2:{B,B}): ghost BOOLEAN
    -> all(x,y)
           {x,y} <= f.domain
           ==>
           r1(x,y)
           ==>
           r2(f(x), f(y))


is_monotonic(f:A->A, r:{A,A}): ghost BOOLEAN
    -> f.is_monotonic(r,r)


is_upcontinuous(f:A->B, r1:{A,A}, r2:{B,B}): ghost BOOLEAN
    -> r1.carrier <= f.domain
       and
       all(p,s)
           s.is_supremum(p,r1)
           ==>
           f(s).is_supremum(f[p],r2)


is_upcontinuous(f:A->A, r:{A,A}): ghost BOOLEAN
    -> f.is_upcontinuous(r,r)

is_prefixpoint(a:A, f:A->A, r:{A,A}): ghost BOOLEAN
    -> a in f.domain and r(a,f(a))

is_total(f:A->A, r:{A,A}): ghost BOOLEAN
    -> r.carrier <= f.domain

is_increasing(f:A->A, r:{A,A}): ghost BOOLEAN
    -> f.is_total(r) and all(x) x in r.carrier ==> r(x,f(x))


{:
# Complete partial order
:}

is_complete_partial_order(r:{A,A}): ghost BOOLEAN
    -> r.is_partial_order
       and
       all(d) d.is_updirected(r) ==> d.has_supremum(r)




{:
# Wellorder
:}


is_wellorder(r:{A,A}): ghost BOOLEAN
        -- Is 'r' a wellorder i.e. a linear order where every nonempty set
        -- has a least element?
    -> r.is_linear_order
       and
       all(p) p <= r.carrier ==> p.has_some ==> p.has_least(r)





{:
# Wellfounded
:}


accessibles (r:{A,A}): ghost {A}
        -- The elements which are accessible by the relation 'r' i.e. all
        -- elements in the carrier of 'r' which have no predecessor or whose
        -- predecessors are all accessible.
    -> {(p): all(y) y in r.carrier ==> (all(x) r(x,y) ==> x in p) ==> y in p}


is_wellfounded (r:{A,A}): ghost BOOLEAN
        -- Is the relation 'r' wellfounded i.e. are all its elements accessible?
    -> r.carrier <= r.accessibles


all(r:{A,A})
    ensure
        r.accessibles <= r.carrier
    end


{:
# Closure system

A closure system in a partial order is a subset of the carrier such that all
subsets of the closure system have an infimum in the closure system. I.e. the
closure system is "closed" with respect to the infimum operation.

Because of this property it is always possible to find a least element in the
closure system which is above another element of the carrier.

A weak closure system is not completely closed with respect to the infimum
operation. Empty subsets of the closure system are excluded. However a weak
closure system must be big enough to contain arbitrarily large elements. The
last property is implicit in a normal closure system.

:}

is_weak_closure_system (p:{A}, r:{A,A}): ghost BOOLEAN
    -> r.is_partial_order
       and
       p <= r.carrier
       and
       (all(x) x in r.carrier ==> (p * x.upper_set(r)).has_some)
       and
       all(q)
           q <= p ==> q.has_some
           ==>
           some(x) x.is_infimum(q,r) and x in p



is_closure_system (p:{A}, r:{A,A}): ghost BOOLEAN
    -> r.is_partial_order
       and
       p <= r.carrier
       and
       all(q)
           q <= p
           ==>
           some(x) x.is_infimum(q,r) and x in p


is_closure_map (f:A->A, r:{A,A}): ghost BOOLEAN
    -> f.is_total(r) and
       f.is_increasing(r) and
       f.is_monotonic(r) and
       f.is_idempotent



all(a:A, p:{A}, r:{A,A})
    require
        p.is_closure_system(r)
    ensure
        p.is_closure_system(r) ==> p.is_weak_closure_system(r)

        p.is_weak_closure_system(r) ==>
        a in r.carrier ==>
        (p * a.upper_set(r)).has_least(r)

    end



closed(a:A, p:{A}, r:{A,A}): ghost A
        -- The least element above 'a' of the closure system 'p' in the
        -- partial order 'r'.
    require
        p.is_weak_closure_system(r)
        a in r.carrier
    ensure
        -> least (p * a.upper_set(r), r)
    end




{:# Interior systems
:}


is_interior_system (p:{A}, r:{A,A}): ghost BOOLEAN
    -> r.is_partial_order
       and
       p <= r.carrier
       and
       all(q) q <= p ==> some(x) x.is_supremum(q,r) and x in p


is_weak_interior_system (p:{A}, r:{A,A}): ghost BOOLEAN
    -> r.is_partial_order
       and
       p <= r.carrier
       and
       (all(x) x in r.carrier ==> (p * x.lower_set(r)).has_some)
       and
       all(q)
           q <= p ==> q.has_some
           ==>
           some(x) x.is_supremum(q,r) and x in p
