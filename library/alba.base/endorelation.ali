use
    predicate_logic
    relation
end

A: ANY

{: Carrier
   ======= :}

carrier (r:{A,A}): ghost A?
        -- The carrier of the relation 'r' i.e. the union of its domain
        -- and range.
    -> domain(r) + range(r)



{: Reflexivity
   =========== :}


is_reflexive (r:{A,A}): ghost BOOLEAN
        -- Is the relation 'r' reflexive?
    -> (all(x,y) r(x,y) ==> r(x,x)) and
       (all(x,y) r(x,y) ==> r(y,y))




all(r:{A,A})
    require
        r.is_reflexive
    ensure
        r.domain  <= r.range
        r.range   <= r.domain
        r.carrier <= r.domain
        r.carrier <= r.range
    end




to_reflexive (p:A?): {A,A}
        -- The least reflexive relation with the carrier 'p'.
    -> {x,y: x=y and p(x)}

all(p:A?)
    ensure
        inverse(p.to_reflexive) = p.to_reflexive
        domain(p.to_reflexive)  = p
        range(p.to_reflexive)   = p
        carrier(p.to_reflexive) = p
    end




reflexive (r:{A,A}): ghost {A,A}
        -- The least reflexive relation which contains 'r'.
    -> {(s): all(a,b) r(a,b) ==> s(a,b),
             all(a,b) r(a,b) ==> s(a,a),
             all(a,b) r(a,b) ==> s(b,b)}

all(a,b:A, r:{A,A})
    ensure
        (r.reflexive)(a,b) ==> (r.reflexive)(a,a)
        (r.reflexive)(a,b) ==> (r.reflexive)(b,b)
        r.reflexive.is_reflexive
    end




{: Symmetry
   ======== :}

symmetric (r:{A,A}): {A,A}
        -- The least symmetric relation which contains 'r'.
    -> r + r.inverse



{: Transitivity
   ============ :}

is_transitive: ghost {{A,A}}
        -- The collection of all transitive relations.
    = {r: all(a,b,c) r(a,b) ==> r(b,c) ==> r(a,c)}

(+) (r:{A,A}): ghost {A,A}
        -- The least transitive relation which contains 'r'.
    -> {(s): all(x,y)   r(x,y) ==> s(x,y),
             all(x,y,z) s(x,y) ==> r(y,z) ==> s(x,z)}

all(a,b,c:A, r:{A,A})
    ensure
        (+r)(a,b) ==> (+r)(b,c) ==> (+r)(a,c)
        (+r).is_transitive
    end

(*) (r:{A,A}): ghost {A,A}
        -- The least reflexive transitive relation which contains 'r'.
    -> + r.reflexive


{: Equivalence
   =========== :}

equivalence (r:{A,A}): ghost {A,A}
        -- The least equivalence relation which contains 'r'.
    -> + r.reflexive.symmetric
