{: Copyright (C) Helmut Brandl  <helmut dot brandl at gmx dot net>

   This file is distributed under the terms of the GNU General Public License
   version 2 (GPLv2) as published by the Free Software Foundation. :}

use
    predicate
end


G:ANY

case class
    LIST[G]
create
    nil
    (^) (head:G, tail:LIST[G])
end

(+) (a,b: LIST[G]): LIST[G]
    -- The concatenation of the lists 'a' and 'b'.

(-) (a:LIST[G]): LIST[G]
    -- The reversed list 'a'.

head (a:LIST[G]): G
        -- The first element of the list 'a'.
    require
        a as x ^ t
    ensure
        Result = inspect a
                 case h ^ _ then h
                 end
    end

tail (a:LIST[G]): LIST[G]
        -- The list 'a' with the first element removed.
    require
        a as x ^ t
    ensure
        Result = inspect a
                 case _ ^ t then t
                 end
    end


all(a,b,c:LIST[G], x:G)
    ensure
        -- concatenation of lists
        a   + nil =  a
        nil + b   =  b
        x^a + b   =  x^(a + b)

        a + b + c  =  a + (b + c)

        -- list reversal
        (-nil = nil)
        (-[x] = [x])        -- [x,y,...] is a shorthand for 'x^y^...^nil'
        (-x^a = -a + [x])

        (-(a + b)  =  -b + -a)
    end
