{: Copyright (C) Helmut Brandl  <helmut dot brandl at gmx dot net>

   This file is distributed under the terms of the GNU General Public License
   version 2 (GPLv2) as published by the Free Software Foundation. :}

use partial_order end

deferred class SEMILATTICE end

SL: SEMILATTICE

(=)  (a,b:SL): BOOLEAN deferred end
(*)  (a,b:SL): SL      deferred end
(<=) (a,b:SL): BOOLEAN -> a = a * b

all(a,b,c:SL)
    deferred ensure
        a = a

        a * a = a
        
        a * b = b * a

        a * b * c = a * (b * c)
    end

deferred class SEMILATTICE
inherit        ANY end

all(a,b,c:SL)
    ensure
        a <= a

        a <= b ==> b <= a ==> a = b

        a <= b ==> b <= c ==> a <= c
    end

deferred class SEMILATTICE
inherit        PARTIAL_ORDER end


all(a,b,c:SL)
    ensure
        a * b <= a
        a * b <= b

        c <= a  ==> c <= b ==> c <= a * b
    end


all(a,b:SL)
    ensure
        (a * b).is_infimum({a,b})
    end


G: ANY

immutable class predicate.PREDICATE[G]
inherit         ghost SEMILATTICE end