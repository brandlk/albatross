open Alba2_common

module Term = Term2

(** Data structures to represent inductive types.*)


module Constructor:
sig
  type t
  (** The type [t] represents the constructor. *)

  val make: Feature_name.t option -> Term.arguments -> Term.t array -> t
(** [make name cargs iargs] makes a constructor with a name, the constructor
   arguments ((name,type) pairs), and the arguments for the inductive
   type. The parameters are not needed because they are identical for all
   inductive types and all constructors. The inductive type [I] is not
   included either. *)
end





type t
val nparams: t -> int
val ntypes: t -> int
val is_restricted: int -> t -> bool
val restricted: int -> t -> t
val nconstructors: int -> t -> int
val parameter: int -> t -> Term.name_type
val params0: t -> Term.arguments
val params: t -> Term.arguments
val name: int -> t -> Feature_name.t option
val itype0: int -> t -> Term.fname_type
val itype: int -> t -> Term.fname_type


val types0: t -> Term.gamma
(** The raw inductive types. They are valid in a context with the parameters. *)

val types: t -> Term.gamma
(** The inductive types. All types include the parameters. *)


val constructor_base_index: int -> t -> int
val cname: int -> int -> t -> Feature_name.t option
val ctype0: int -> int -> t -> Term.fname_type
val ctype: int -> int -> t -> Term.fname_type


val constructors: int -> t -> Term.fname_type list
(** [constructors ith ind] is the list of all constructors (names and types)
   of the inductive type [ith] of the family [ind], valid in a context with
   all absolute inductive types and the parameters.  *)


val recursive_arguments: int -> int -> t -> int list


val make: Term.arguments -> Term.gamma -> Constructor.t array array -> t
(** [make params types constructors] makes an inductive type family with
   common paramters and an array of named types and one constructor array for
   each inductive type in the family.

   The types must be valid in a context with all parameters.

   The absolute inductive types are generated by using the raw types with the
   parameters push in front.

   The constructors are valid in a context with all absolute inductive types
   (the types include the abstracted parameters) and the parameters (in that
   order).

*)


val make_simple: Feature_name.t option -> Term.arguments -> Term.typ ->
                 Constructor.t array -> t


val make_natural: t
val make_false: t
val make_true: t
val make_and: t
val make_or: t
val make_equal: int -> t
val make_list: int -> t
val make_accessible: int -> t
